 /*  * Copyright (C) <2012>  <Nab Raj Roshyara> *  This program is free software: you can redistribute it and/or modify it under the terms of the GNU *  General PublicLicense as published by the Free Software Foundation, either version 3 of the License, *  or  any later version.This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *  See the  GNU General Public License for more details.You should have received a copy of the GNU General Public License  along with this program. *  If not, see <http://www.gnu.org/licenses/>.*/#include<iostream>#include<string>#include<fstream>#include<cstdlib>#include<vector>#include<algorithm>#include "fcgene.h"#ifdef HAVE_CONFIG_H#include "config.h" #endif//#include<iomanip>using namespace std;ofstream LIN;int main(int argc, char**argv){	TimeInfo TimeInfo;	//time(&startTime);	Argcv  Args (argc,argv);	//cout <<"\n Argcv::bparam_vec.size(): "<<Argcv::bparam_vec.size()<<endl;	if(Argcv::bparam_vec.size()==0 ) //generally this condition never comes	{		const string msg="Basic  parameters given on command line are not saved properly.\n"				"It may be due to the internal saving problem. Please contact the software provider.\n";		error(msg);	}	Bpar * const pBaseParams =Argcv::bparam_vec[0]; //this is a pointer to Bpar class containing  the basic parameters	//open the log file and write the  starting of log file	string screen_outFileName= pBaseParams->output_fileName+"_fcgene.log";	// cout << "\n screen_outFileName: "<< screen_outFileName <<"\n"; // debug	 LIN.open(screen_outFileName.c_str(),fstream::out);	 //printing logo of imise	 printLIN(		 			"\n||====================================================================================||\n"			 	 	"*-> Version: 1.0.7\n"		 			"*-> Copyright:  GNU General Public License\n"		 			"*-> Program Developer: 	\n"		 			"\t Nab Raj Roshyara	 \n"		 			"\t email: roshyara@yahoo.com	 \n"		 			"\t Universitaet Leipzig		 \n"		 			"\t Leipzig Research Center for Civilization Diseases(LIFE)\n"		 			"\t Institute for Medical Informatics, Statistics and Epidemiology (IMISE)\n"		 			"\t Group: Genetical Statistics and Systems Biology \n"		 			"\t Group Leader: Prof. Dr. Markus Scholz\n"		 			 "|--------------------------------------------------------------------------------------|\n"					  		 			);	 setCoptions(pBaseParams);	// cout <<"test1 \n";	 Args.print_given_options();	 displayHelp(pBaseParams->hilfe);	 //handeling with the commands between --merge-start --merge-end commands	 const unsigned int SZ_bparam		=Argcv::bparam_vec.size(); // size of basic parameters group	 vector<CGENERAL*> CGEN_VEC;	 for(unsigned int j=0;j<SZ_bparam; ++j)	 {		 CGENERAL* pCGENERAL =new CGENERAL;		 CGEN_VEC.push_back(pCGENERAL);	 }	 //cout<< CGEN_VEC[0]->genVec.size() <<endl;	 unsigned int idx_bparam	=0;	  CGENERAL*  _pCGENERAL=CGEN_VEC[0];		 if(SZ_bparam>1)	 {		 idx_bparam=1;		 while(idx_bparam<SZ_bparam)		 {			_pCGENERAL =CGEN_VEC[idx_bparam];				string _tmp="";			 if (idx_bparam==1)				 _tmp = "first";			 else if (idx_bparam==2)				 _tmp ="second";			 else if(idx_bparam==3)				 _tmp="third";			 else				 _tmp =change_int_into_string(idx_bparam)+"th";			 printLIN("*->Working on command options given within  "+_tmp+" \"--new-start\" and \"--new-end\" command:\n");			 Bpar * pParams=Argcv::bparam_vec[idx_bparam];			 setCoptions(pParams);			 Args.print_new_options(pParams);			 printLIN("\t**->Reading "+pParams->code_readType+" related files: \n");			 _pCGENERAL->read_data(pParams); //this should be also in the loop			 if(pParams->ssplitt || pParams->isplitt||pBaseParams->bpsplitt)			 {				// cout << "hi there split\n";				 handel_with_splitting(_pCGENERAL,pParams);			 }else			 {				 handel_with_general_commands(_pCGENERAL,pParams);			 }			 printLIN("*->End of work on command options given within  "+_tmp+" \"--new-start\" and \"--new-end\" command!\n");			 if(pParams->merge_data)			 printLIN("*->Data uploaded here will be merged with the data mentioned outside of \"--new-start\" and \"--new-end\" commands!\n");			 printLIN("|-----------------------------------------------------------------------------------------------------------------|\n");			 ++idx_bparam;		 }	 }	 if(SZ_bparam>1)	 printLIN("*->Working on  command options given outside of \"--new-start\" and \"--new-end\":\n");	 _pCGENERAL =CGEN_VEC[0];	 Args.print_new_options(pBaseParams);	 _pCGENERAL->read_data(pBaseParams); //this should be also in the loop	 handel_with_merging(CGEN_VEC,pBaseParams);	 if(pBaseParams->ssplitt || pBaseParams->isplitt || pBaseParams->bpsplitt ){		// cout << "hi there split\n";		 handel_with_splitting(_pCGENERAL,pBaseParams);	 }else	 {		 //cout <<"hi \n";		 handel_with_general_commands(_pCGENERAL,pBaseParams);	 }	//-------------------------------------------------------------------------------//	cout.width(10);	// final step for the time	TimeInfo.~TimeInfo();	TimeInfo.displayTime();	//time(&endTime);	 //*diffTime=difftime(endTime,startTime);	 //* printf("Total time taken for the analysis: %.10lf seconds.",diffTime);	//	 for(unsigned int j=0;j<SZ_bparam; ++j)	 {		 delete CGEN_VEC[j];	 }	LIN.clear();LIN.close();	return 0;}